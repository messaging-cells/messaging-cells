# Hierarchical vpp syntax

Grammar		<- Spacing Definition+ EndOfFile

Definition	<- Identifier 			{ if (push(beginRule(findRule(yytext)))->rule.expression) fprintf(stderr, "rule '%s' redefined\n", yytext); }
		     LEFTARROW Expression	{ Node *e= pop();  Rule_setExpression(pop(), e); } &{ YYACCEPT }
Expression	<- Sequence (SLASH Sequence	{ Node *f= pop();  push(Alternate_append(pop(), f)); }
			    )*
Sequence	<- Prefix (Prefix		{ Node *f= pop();  push(Sequence_append(pop(), f)); }	#ikp expanded from 'Seq <- Prefix*'
			  )*
		 / 				{ push(makePredicate("1")); }				#ikp added
Prefix		<- AND Action			{ push(makePredicate(yytext)); }	#ikp added
		 / AND Suffix			{ push(makePeekFor(pop())); }		#ikp expanded from 'Prefix <- (AND/NOT)? Suffix'
		 / NOT Suffix			{ push(makePeekNot(pop())); }
		 /     Suffix
Suffix		<- Primary (QUESTION		{ push(makeQuery(pop())); }
			     / STAR		{ push(makeStar (pop())); }
			     / PLUS		{ push(makePlus (pop())); }
			   )?
Primary		<- Identifier !LEFTARROW	{ push(makeName(findRule(yytext))); }
		 / OPEN Expression CLOSE
		 / Literal			{ push(makeString(yytext)); }
		 / Class			{ push(makeClass(yytext)); }
		 / DOT				{ push(makeDot()); }
		 / Action			{ push(makeAction(0, yytext)); }	#ikp added
		 / BEGIN			{ push(makePredicate("YY_BEGIN")); }	#ikp added
		 / END				{ push(makePredicate("YY_END")); }	#ikp added

# Lexical syntax

Identifier	<- < IdentStart IdentCont* > Spacing		#ikp inserted < ... >
IdentStart	<- [a-zA-Z_]
IdentCont	<- IdentStart / [0-9]
Literal		<- ['] < (!['] Char )* > ['] Spacing
		 / ["] < (!["] Char )* > ["] Spacing
Class		<- '[' < (!']' Range)* > ']' Spacing		#ikp inserted < ... >
Range		<- Char '-' Char / Char
LEFTARROW	<- '<-' Spacing
SLASH		<- '/' Spacing
AND		<- '&' Spacing
NOT		<- '!' Spacing
QUESTION	<- '?' Spacing
STAR		<- '*' Spacing
PLUS		<- '+' Spacing
OPEN		<- '(' Spacing
CLOSE		<- ')' Spacing
DOT		<- '.' Spacing

Action		<- '{' < [^}]* > '}' Spacing		#ikp added
BEGIN		<- '<' Spacing				#ikp added
END		<- '>' Spacing				#ikp added

Symbol		<- [!#$%&=?¡¿*+~:;,|] / '\\' / '/' / '^' / '-'

# Symbol		<- '!' / '#' / '$' / '%' / '&' / '/' / '=' / '?' / '¡' / '?' / '¡' / '¿' / '*' / '+' / '~' / '^' / '-' / ':' / ';' / ',' / '|' 
# 			/ '<' / '>' 

String		<- ['] < (!['] Char )* > ['] Spacing
		 / ["] < (!["] Char )* > ["] Spacing
Char		<- '\\' [abefnrtv'"\[\]\\]
		 / '\\' [0-3][0-7][0-7]
		 / '\\' [0-7][0-7]?
		 / !'\\' .
Letter		<- [a-zA-Z_]
Number		<- [0-9]
OpenRB		<- '(' Spacing
CloseRB		<- ')' Spacing
OpenBB		<- '[' Spacing
CloseBB		<- ']' Spacing
OpenCB		<- '{' Spacing
CloseCB		<- '}' Spacing
Spacing		<- (Space / Comment)*
Space		<- ' ' / '\t' / EndOfLine
Comment		<- '#' (!EndOfLine .)* EndOfLine
EndOfLine	<- '\r\n' / '\n' / '\r'
EndOfFile	<- !.
